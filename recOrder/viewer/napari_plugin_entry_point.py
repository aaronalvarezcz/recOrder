from napari_plugin_engine import napari_hook_implementation
from qtpy.QtWidgets import QWidget, QHBoxLayout
import numpy as np

"""
each of these GUI files is generated by qtdesigner.
To generate a new .py file from the designer's .ui file, type this in terminal

pyuic5 -x <.ui input file> -o <.py output file>

"""
from recOrder.viewer.qtdesigner import recOrder_combined_06232021
from recOrder.viewer.qtdesigner import recOrder_offline_06232021
from recOrder.viewer.qtdesigner import recOrder_acquisition_06232021
from recOrder.viewer.qtdesigner import recOrder_calibration_06232021
from recOrder.viewer.viewer_manager import SignalManager


class RecOrderCombined(QWidget):
    def __init__(self, napari_viewer):
        super().__init__()
        self.viewer = napari_viewer

        # morphed_tab_widget is the .py file generated by pyuic5
        ui = recOrder_combined_06232021.Ui_Form()
        ui.setupUi(self)
        self.setLayout(QHBoxLayout())
        self.layout().addWidget(self)

        # we need to add all our signal connections
        SignalManager("combined", self, self)
        # ui.qbutton_snap_and_correct.clicked[bool].connect(self._handle_snap)

    # def _handle_snap(self):
    #     # add a random image when snap is clicked
    #     image = 0.2 * np.random.random((500, 500)) + 0.5
    #     layer = self.viewer.add_image(image, contrast_limits=[0,1], name='background')


class RecOrderOffline(QWidget):
    def __init__(self, napari_viewer):
        super().__init__()
        self.viewer = napari_viewer

        # morphed_tab_widget is the .py file generated by pyuic5
        ui = recOrder_offline_06232021.Ui_Form()
        ui.setupUi(self)
        self.setLayout(QHBoxLayout())
        self.layout().addWidget(self)

        # we need to add all our signal connections
        SignalManager("offline", self, self)


class RecOrderAcquisition(QWidget):
    def __init__(self, napari_viewer):
        super().__init__()
        self.viewer = napari_viewer

        # morphed_tab_widget is the .py file generated by pyuic5
        ui = recOrder_acquisition_06232021.Ui_Form()
        ui.setupUi(self)
        self.setLayout(QHBoxLayout())
        self.layout().addWidget(self)

        # we need to add all our signal connections
        SignalManager("acquisition", self, self)


class RecOrderCalibration(QWidget):
    def __init__(self, napari_viewer):
        super().__init__()
        self.viewer = napari_viewer

        # morphed_tab_widget is the .py file generated by pyuic5
        ui = recOrder_calibration_06232021.Ui_Form()
        ui.setupUi(self)
        self.setLayout(QHBoxLayout())
        self.layout().addWidget(self)

        # we need to add all our signal connections
        SignalManager("calbiration", self, self)


@napari_hook_implementation
def napari_experimental_provide_dock_widget():
    # you can return either a single widget, or a sequence of widgets
    # each widget is accessible as a new plugin that stacks in the side panel
    return [RecOrderCombined, RecOrderOffline, RecOrderAcquisition, RecOrderCalibration]
